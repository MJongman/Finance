USE [STAGING_AXNL]
GO
/****** Object:  User [KS\sa_sch1sql1v16]    Script Date: 26-8-2025 21:36:11 ******/
CREATE USER [KS\sa_sch1sql1v16] FOR LOGIN [KS\sa_sch1sql1v16] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [KS\SCS-ICT-BI-Developpers]    Script Date: 26-8-2025 21:36:11 ******/
CREATE USER [KS\SCS-ICT-BI-Developpers] FOR LOGIN [KS\SCS-ICT-BI-Developpers]
GO
/****** Object:  User [NT AUTHORITY\SYSTEM]    Script Date: 26-8-2025 21:36:11 ******/
CREATE USER [NT AUTHORITY\SYSTEM] FOR LOGIN [NT AUTHORITY\SYSTEM] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [sa_bi_etl_ssis]    Script Date: 26-8-2025 21:36:11 ******/
CREATE USER [sa_bi_etl_ssis] FOR LOGIN [sa_bi_etl_ssis] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [sa_linkedservers]    Script Date: 26-8-2025 21:36:11 ******/
CREATE USER [sa_linkedservers] FOR LOGIN [sa_linkedservers] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [sa_schema_compare]    Script Date: 26-8-2025 21:36:11 ******/
CREATE USER [sa_schema_compare] FOR LOGIN [sa_schema_compare] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  DatabaseRole [SQLArcExtensionUserRole]    Script Date: 26-8-2025 21:36:11 ******/
CREATE ROLE [SQLArcExtensionUserRole]
GO
ALTER ROLE [db_datareader] ADD MEMBER [KS\sa_sch1sql1v16]
GO
ALTER ROLE [db_owner] ADD MEMBER [KS\SCS-ICT-BI-Developpers]
GO
ALTER ROLE [SQLArcExtensionUserRole] ADD MEMBER [NT AUTHORITY\SYSTEM]
GO
ALTER ROLE [db_owner] ADD MEMBER [sa_bi_etl_ssis]
GO
ALTER ROLE [db_datareader] ADD MEMBER [sa_linkedservers]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [sa_linkedservers]
GO
ALTER ROLE [db_owner] ADD MEMBER [sa_schema_compare]
GO
/****** Object:  Schema [exe]    Script Date: 26-8-2025 21:36:11 ******/
CREATE SCHEMA [exe]
GO
/****** Object:  Schema [Incr]    Script Date: 26-8-2025 21:36:11 ******/
CREATE SCHEMA [Incr]
GO
/****** Object:  Schema [temp]    Script Date: 26-8-2025 21:36:11 ******/
CREATE SCHEMA [temp]
GO
/****** Object:  UserDefinedFunction [dbo].[fn_AdjustDateTimeWithDaylightSaving]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
creaTE function [dbo].[fn_AdjustDateTimeWithDaylightSaving] (@input datetime)
RETURNS datetime
as
begin

declare @inputDateTime datetime, @april datetime, @november datetime, @dayOfWeek int, @march datetime, @october datetime 

set @inputDateTime = @input
set @april = cast(year(getdate()) as nvarchar(4)) + '-04-01'
set @dayOfWeek = case when datepart(dw, @april) = 1 then 7 else (datepart(dw, @april) + 6) % 7 end
set @march = dateadd(hour, 2, dateadd(day, -@dayOfWeek, @april))
set @november = cast(year(getdate()) as nvarchar(4)) + '-11-01'
set @dayOfWeek = case when datepart(dw, @november) = 1 then 7 else (datepart(dw, @november) + 6) % 7 end
set @october = dateadd(hour, 2, dateadd(day, -@dayOfWeek, @november))

-- Convert UTC to CENTRAL EUROPE (+1 Winter, +2 Summer)
return case
    when @inputDateTime is null
	then null
	when @inputDateTime between @march and @october 
	then dateadd(hour, 2, @inputDateTime) 
	else dateadd(hour, 1, @inputDateTime)
       end
end
GO
/****** Object:  Table [dbo].[ADDRESS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADDRESS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CITY] [nvarchar](60) NULL,
	[COUNTRYREGIONID] [nvarchar](10) NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[NAME] [nvarchar](60) NULL,
	[RECID] [bigint] NOT NULL,
	[STATE] [nvarchar](10) NULL,
	[STREET] [nvarchar](250) NULL,
	[TYPE] [int] NULL,
	[ZIPCODE] [nvarchar](10) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_ADDRESS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADDRESSCOUNTRYREGION]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADDRESSCOUNTRYREGION](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[COUNTRYREGIONID] [nvarchar](10) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[NAME] [nvarchar](60) NULL,
	[ISOCODE] [nvarchar](2) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_ADDRESSCOUNTRYREGION] PRIMARY KEY CLUSTERED 
(
	[COUNTRYREGIONID] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ADDRESSSTATE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ADDRESSSTATE](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[COUNTRYREGIONID] [nvarchar](10) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[NAME] [nvarchar](60) NULL,
	[STATEID] [nvarchar](10) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_ADDRESSSTATE] PRIMARY KEY CLUSTERED 
(
	[COUNTRYREGIONID] ASC,
	[DATAAREAID] ASC,
	[STATEID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CGK_SALESKPI_TABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CGK_SALESKPI_TABLE](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[INVENTSITEID] [nvarchar](10) NULL,
	[SALESID] [nvarchar](20) NULL,
	[LINENUM] [numeric](28, 12) NOT NULL,
	[LEVEL1] [numeric](28, 12) NOT NULL,
	[LEVEL2] [numeric](28, 12) NOT NULL,
	[LEVEL3] [numeric](28, 12) NOT NULL,
	[LEVEL4] [numeric](28, 12) NOT NULL,
	[SOURCE] [int] NULL,
	[ITEMID] [nvarchar](30) NULL,
	[SALESLINERECID] [bigint] NULL,
	[INVENTREFID] [nvarchar](20) NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[CREATEDBY] [nvarchar](5) NULL,
	[Lineage_Key] [bigint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTGROUP](
	[CUSTGROUP] [nvarchar](10) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[NAME] [nvarchar](60) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_CUSTGROUP] PRIMARY KEY CLUSTERED 
(
	[CUSTGROUP] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTINVOICEJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTINVOICEJOUR](
	[CUSTOMERREF] [nvarchar](60) NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[DIMENSION] [nvarchar](10) NULL,
	[DLVMODE] [nvarchar](10) NULL,
	[INVOICEDATE] [datetime] NOT NULL,
	[INVOICEID] [nvarchar](20) NOT NULL,
	[ORDERACCOUNT] [nvarchar](20) NOT NULL,
	[PAYMENT] [nvarchar](10) NULL,
	[SALESID] [nvarchar](20) NOT NULL,
	[SALESORIGINID] [nvarchar](10) NULL,
	[SBA_SALESORDERTYPE] [nvarchar](10) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTINVOICETRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTINVOICETRANS](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTTRANSID] [nvarchar](20) NOT NULL,
	[INVOICEDATE] [datetime] NOT NULL,
	[INVOICEID] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](30) NULL,
	[LINEAMOUNT] [numeric](28, 12) NOT NULL,
	[LINENUM] [numeric](28, 12) NOT NULL,
	[LINEPERCENT] [numeric](28, 12) NOT NULL,
	[QTY] [numeric](28, 12) NOT NULL,
	[SALESORIGINID] [nvarchar](10) NULL,
	[SALESPRICE] [numeric](28, 12) NOT NULL,
	[SBA_ENDDISC] [int] NULL,
	[SBA_ENDDISCPCT] [numeric](28, 12) NOT NULL,
	[SBA_ITEMGROUPID] [nvarchar](10) NULL,
	[ORIGSALESID] [nvarchar](20) NULL,
	[SBA_ITEMGROUP] [nvarchar](10) NULL,
	[SBA_MAINITEMGROUP] [nvarchar](10) NULL,
	[SBA_ACTIONCODE] [nvarchar](10) NULL,
	[INVENTREFID] [nvarchar](20) NULL,
	[INVENTREFTYPE] [int] NULL,
	[SBA_PACKINGSLIPID] [nvarchar](20) NULL,
	[SALESID] [nvarchar](20) NULL,
	[RECID] [bigint] NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_CUSTINVOICETRANS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTPACKINGSLIPJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTPACKINGSLIPJOUR](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECID] [bigint] NOT NULL,
	[SALESID] [nvarchar](20) NULL,
	[PACKINGSLIPID] [nvarchar](20) NULL,
	[SBA_CALCDEPARTUREDATE] [datetime] NOT NULL,
	[SBA_CALCDEPARTURETIME] [int] NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_CUSTPACKINGSLIPJOUR] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTPACKINGSLIPTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTPACKINGSLIPTRANS](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTTRANSID] [nvarchar](20) NULL,
	[ITEMID] [nvarchar](30) NULL,
	[LINENUM] [numeric](28, 12) NOT NULL,
	[ORIGSALESID] [nvarchar](20) NOT NULL,
	[PACKINGSLIPID] [nvarchar](20) NOT NULL,
	[QTY] [numeric](28, 12) NOT NULL,
	[RECID] [bigint] NOT NULL,
	[VALUEMST] [numeric](28, 12) NOT NULL,
	[DELIVERYDATE] [datetime] NOT NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[INVENTREFID] [nvarchar](20) NULL,
	[INVENTREFTYPE] [int] NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_CUSTPACKINGSLIPTRANS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTSTATISTICSGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTSTATISTICSGROUP](
	[CUSTSTATISTICSGROUP] [nvarchar](10) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[STATGROUPNAME] [nvarchar](60) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_CUSTSTATISTICSGROUP] PRIMARY KEY CLUSTERED 
(
	[CUSTSTATISTICSGROUP] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTTABLE](
	[ACCOUNTNUM] [nvarchar](20) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[NAME] [nvarchar](60) NULL,
	[STREET] [nvarchar](250) NULL,
	[ZIPCODE] [nvarchar](10) NULL,
	[CITY] [nvarchar](60) NULL,
	[COUNTRYREGIONID] [nvarchar](10) NULL,
	[INVENTSITEID] [nvarchar](10) NULL,
	[CUSTGROUP] [nvarchar](10) NULL,
	[INVOICEACCOUNT] [nvarchar](20) NULL,
	[PAYMTERMID] [nvarchar](10) NULL,
	[VATNUM] [nvarchar](20) NULL,
	[PARTYID] [nvarchar](20) NULL,
	[PARTYTYPE] [int] NULL,
	[SEGMENTID] [nvarchar](20) NULL,
	[FOU_CUSTSEGMLVL1] [nvarchar](20) NULL,
	[FOU_CUSTSEGMLVL2] [nvarchar](20) NULL,
	[FOU_CUSTSEGMLVL3] [nvarchar](20) NULL,
	[BLOCKED] [int] NULL,
	[SBA_CUSTBLOCKSALESORDER] [int] NULL,
	[RECID] [bigint] NULL,
	[CGK_SALESREPRESENTATIVE] [nvarchar](20) NULL,
	[SBA_SALESDEPRESPONSIBLEEM20064] [nvarchar](20) NULL,
	[DLVMODE] [nvarchar](10) NULL,
	[PAYMMODE] [nvarchar](10) NULL,
	[PRICEGROUP] [nvarchar](10) NULL,
	[STATISTICSGROUP] [nvarchar](10) NULL,
	[SUBSEGMENTID] [nvarchar](20) NULL,
	[COMPANYCHAINID] [nvarchar](20) NULL,
	[MODIFIEDDATETIME] [datetime] NULL,
	[BANKCENTRALBANKPURPOSECODE] [nvarchar](10) NULL,
	[Lineage_Key] [bigint] NULL,
	[MAINCONTACTID] [nvarchar](20) NULL,
	[LANGUAGEID] [nvarchar](7) NULL,
	[SBA_OLDCUSTOMERNUMBER] [nvarchar](20) NULL,
 CONSTRAINT [PK_CUSTTABLE] PRIMARY KEY CLUSTERED 
(
	[ACCOUNTNUM] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CUSTVENDEXTERNALITEM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CUSTVENDEXTERNALITEM](
	[ABCCATEGORY] [int] NOT NULL,
	[CUSTVENDRELATION] [nvarchar](20) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[EXTERNALITEMID] [nvarchar](30) NULL,
	[MODULETYPE] [int] NOT NULL,
	[INVENTDIMID] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[SBA_ITEMGROUPVENDCODE] [nvarchar](30) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_CUSTVENDEXTERNALITEM] PRIMARY KEY CLUSTERED 
(
	[ABCCATEGORY] ASC,
	[CUSTVENDRELATION] ASC,
	[DATAAREAID] ASC,
	[MODULETYPE] ASC,
	[INVENTDIMID] ASC,
	[ITEMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DATAAREA]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DATAAREA](
	[ID] [nvarchar](4) NULL,
	[Description] [nvarchar](47) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DIMENSIONS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DIMENSIONS](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[DIMENSIONCODE] [int] NOT NULL,
	[NUM] [nvarchar](10) NOT NULL,
	[DESCRIPTION] [nvarchar](60) NULL,
	[INCHARGE] [nvarchar](20) NULL,
	[CLOSED] [int] NULL,
	[COMPANYGROUP] [nvarchar](10) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DIMENSIONS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[DIMENSIONCODE] ASC,
	[NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DIRECOMMUNICATIONADDRESS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DIRECOMMUNICATIONADDRESS](
	[EMAIL] [nvarchar](80) NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECID] [bigint] NOT NULL,
	[ECOMMUNICATIONTYPEID] [nvarchar](20) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DIRECOMMUNICATIONADDRESS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DIRORGANIZATIONDETAIL]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DIRORGANIZATIONDETAIL](
	[ABC] [int] NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[PARTYID] [varchar](12) NOT NULL,
	[NUMBEROFEMPLOYEES] [int] NULL,
	[ORGNUMBER] [nvarchar](25) NULL,
	[SBA_COMMERCENUMCHAMBER] [nvarchar](10) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DIRORGANIZATIONDETAIL] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[PARTYID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DIRPARTYADDRESSRELATIONSHI1066]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DIRPARTYADDRESSRELATIONSHI1066](
	[ADDRESSRECID] [bigint] NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[PARTYADDRESSRELATIONSHIPRECID] [bigint] NOT NULL,
	[REFCOMPANYID] [nvarchar](4) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DIRPARTYADDRESSRELATIONSHI1066] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[PARTYADDRESSRELATIONSHIPRECID] ASC,
	[REFCOMPANYID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DIRPARTYADDRESSRELATIONSHIP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DIRPARTYADDRESSRELATIONSHIP](
	[DATAAREAID] [nvarchar](50) NOT NULL,
	[ISPRIMARY] [int] NULL,
	[PARTYID] [nvarchar](20) NULL,
	[RECID] [bigint] NOT NULL,
	[STATUS] [int] NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DIRPARTYADDRESSRELATIONSHIP] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DIRPARTYECOMMUNICATIONRELA2608]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DIRPARTYECOMMUNICATIONRELA2608](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[PARTYID] [nvarchar](20) NULL,
	[RECID] [bigint] NOT NULL,
	[STATUS] [int] NULL,
	[VALUESRECID] [bigint] NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DIRPARTYECOMMUNICATIONRELA2608] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DIRPARTYTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DIRPARTYTABLE](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[NAME] [nvarchar](60) NULL,
	[PARTYID] [nvarchar](20) NOT NULL,
	[TYPE] [int] NULL,
	[RECID] [bigint] NOT NULL,
	[SBA_DIRPARTYSTATISTICSGROUPID] [nvarchar](4) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DIRPARTYTABLE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DOCUREF]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DOCUREF](
	[RECID] [bigint] NOT NULL,
	[REFTABLEID] [int] NULL,
	[REFRECID] [bigint] NULL,
	[NAME] [nvarchar](60) NULL,
	[TYPEID] [nvarchar](10) NULL,
	[REFCOMPANYID] [nvarchar](4) NOT NULL,
	[RESTRICTION] [int] NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[SBA_CONTACTREMINDER] [datetime] NOT NULL,
	[NOTES] [nvarchar](max) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_DOCUREF] PRIMARY KEY CLUSTERED 
(
	[RECID] ASC,
	[REFCOMPANYID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMPLTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMPLTABLE](
	[ALTNUM] [nvarchar](20) NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[EMPLID] [nvarchar](20) NOT NULL,
	[PARTYID] [nvarchar](20) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_EMPLTABLE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[EMPLID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FOU_CPBTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FOU_CPBTABLE](
	[DESCRIPTION] [nvarchar](60) NULL,
	[CPB] [nvarchar](10) NULL,
	[Valid_From] [datetime] NULL,
	[Valid_To] [datetime] NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FOU_CPGTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FOU_CPGTABLE](
	[DESCRIPTION] [nvarchar](60) NULL,
	[CPG] [nvarchar](10) NULL,
	[Valid_To] [datetime] NULL,
	[Valid_From] [datetime] NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTCOUNTJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTCOUNTJOUR](
	[JOURNALID] [nvarchar](10) NULL,
	[INVENTDIMID] [nvarchar](20) NULL,
	[ITEMID] [nvarchar](30) NULL,
	[COUNTEDQTY] [numeric](28, 12) NOT NULL,
	[INVENTONHAND] [numeric](28, 12) NOT NULL,
	[COUNTDATE] [datetime] NOT NULL,
	[Valid_From] [datetime] NULL,
	[Valid_To] [datetime] NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTDIM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTDIM](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTDIMID] [nvarchar](20) NOT NULL,
	[INVENTSITEID] [nvarchar](10) NULL,
	[INVENTLOCATIONID] [nvarchar](10) NULL,
	[WMSLOCATIONID] [nvarchar](14) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTDIM] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[INVENTDIMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTITEMGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTITEMGROUP](
	[ITEMGROUPID] [nvarchar](10) NULL,
	[NAME] [nvarchar](60) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTITEMGTIN]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTITEMGTIN](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[GTIN] [numeric](28, 12) NOT NULL,
	[INVENTDIMID] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[UNITID] [nvarchar](10) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTITEMGTIN] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[INVENTDIMID] ASC,
	[ITEMID] ASC,
	[UNITID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTITEMPRICE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTITEMPRICE](
	[ACTIVATIONDATE] [datetime2](7) NOT NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTDIMID] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[PRICE] [numeric](28, 12) NOT NULL,
	[PRICETYPE] [int] NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTITEMPRICE] PRIMARY KEY CLUSTERED 
(
	[ACTIVATIONDATE] ASC,
	[CREATEDDATETIME] ASC,
	[DATAAREAID] ASC,
	[INVENTDIMID] ASC,
	[ITEMID] ASC,
	[PRICETYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTITEMPURCHSETUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTITEMPURCHSETUP](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[INVENTDIMID] [varchar](12) NOT NULL,
	[LOWESTQTY] [numeric](28, 12) NOT NULL,
	[MULTIPLEQTY] [numeric](28, 12) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTITEMPURCHSETUP] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[ITEMID] ASC,
	[INVENTDIMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTJOURNALTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTJOURNALTRANS](
	[JOURNALID] [nvarchar](10) NULL,
	[ITEMID] [nvarchar](30) NULL,
	[INVENTDIMID] [nvarchar](20) NULL,
	[TRANSDATE] [datetime] NOT NULL,
	[COUNTED] [numeric](28, 12) NOT NULL,
	[COSTPRICE] [numeric](28, 12) NOT NULL,
	[COSTAMOUNT] [numeric](28, 12) NOT NULL,
	[RECID] [bigint] NULL,
	[Valid_To] [datetime] NULL,
	[Valid_From] [datetime] NULL,
	[Lineage_Key] [bigint] NULL,
	[MODIFIEDDATETIME] [datetime] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTPOSTING]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTPOSTING](
	[ITEMRELATION] [nvarchar](30) NULL,
	[LEDGERACCOUNTID] [nvarchar](20) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTSITE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTSITE](
	[SITEID] [nvarchar](10) NOT NULL,
	[NAME] [nvarchar](60) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTSUM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTSUM](
	[AVAILPHYSICAL] [numeric](28, 12) NULL,
	[CLOSED] [int] NULL,
	[CLOSEDQTY] [int] NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTDIMID] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[PHYSICALINVENT] [numeric](28, 12) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTSUM] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[INVENTDIMID] ASC,
	[ITEMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTSUM CYCLECOUNT]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTSUM CYCLECOUNT](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[INVENTDIMID] [nvarchar](20) NULL,
	[ITEMID] [nvarchar](30) NULL,
	[INVENTDIM_INVENTSITEID] [nvarchar](10) NULL,
	[AVAILPHYSICAL] [decimal](28, 12) NULL,
	[Lineage_Key] [bigint] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTSUM_CYCLECOUNT]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTSUM_CYCLECOUNT](
	[INVENTDIMID] [nvarchar](20) NULL,
	[ITEMID] [nvarchar](30) NULL,
	[INVENTDIM_INVENTSITEID] [nvarchar](10) NULL,
	[AVAILPHYSICAL] [decimal](28, 12) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTTABLE](
	[ALTITEMID] [nvarchar](30) NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[ITEMGROUPID] [nvarchar](10) NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[ITEMNAME] [nvarchar](60) NULL,
	[ITEMTYPE] [int] NULL,
	[NAMEALIAS] [nvarchar](20) NULL,
	[FOU_CPB] [nvarchar](10) NOT NULL,
	[FOU_CPG] [nvarchar](10) NULL,
	[NETWEIGHT] [numeric](28, 12) NOT NULL,
	[ORIGCOUNTRYREGIONID] [nvarchar](10) NULL,
	[PRIMARYVENDORID] [nvarchar](20) NOT NULL,
	[SBA_INVENTITEMSTATUS] [int] NULL,
	[SBA_ITEMBLOCKPURCH] [int] NULL,
	[SBA_ITEMBLOCKSALES] [int] NULL,
	[SBA_ITEMGROUP] [nvarchar](10) NULL,
	[SBA_ITEMTYPE] [nvarchar](10) NULL,
	[SBA_MAINITEMGROUP] [nvarchar](10) NULL,
	[SBA_RAI_ONSTOCKCODEVENDOR] [nvarchar](10) NULL,
	[SBA_RAI_STATUSCODE] [int] NULL,
	[SBA_RETURNDEPOSITITEM] [nvarchar](30) NULL,
	[SBA_TECDOCBRANDID] [nvarchar](4) NULL,
	[SBA_TECDOCITEMID] [nvarchar](22) NULL,
	[SBA_TECDOCGENERICITEM] [nvarchar](5) NULL,
	[UNITVOLUME] [numeric](28, 12) NOT NULL,
	[USEALTITEMID] [int] NULL,
	[FOU_SKU] [int] NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTTABLE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[ITEMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTTABLEMODULE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTTABLEMODULE](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[LINEDISC] [nvarchar](10) NULL,
	[MARKUPGROUPID] [nvarchar](10) NULL,
	[MODULETYPE] [int] NOT NULL,
	[PRICE] [numeric](28, 12) NOT NULL,
	[PRICEQTY] [numeric](28, 12) NOT NULL,
	[PRICEUNIT] [numeric](28, 12) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTTABLEMODULE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[ITEMID] ASC,
	[MODULETYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INVENTTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INVENTTRANS](
	[COSTAMOUNTADJUSTMENT] [numeric](28, 12) NOT NULL,
	[COSTAMOUNTOPERATIONS] [numeric](28, 12) NOT NULL,
	[COSTAMOUNTPOSTED] [numeric](28, 12) NOT NULL,
	[COSTAMOUNTSETTLED] [numeric](28, 12) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[DATEFINANCIAL] [datetime] NULL,
	[ITEMID] [nvarchar](30) NULL,
	[INVENTDIMID] [nvarchar](20) NOT NULL,
	[INVENTTRANSID] [nvarchar](20) NOT NULL,
	[QTY] [numeric](28, 12) NOT NULL,
	[RECID] [bigint] NOT NULL,
	[TRANSTYPE] [int] NULL,
	[INVOICEID] [nvarchar](20) NULL,
	[DATEPHYSICAL] [datetime] NULL,
	[PACKINGSLIPID] [nvarchar](20) NULL,
	[TRANSREFID] [nvarchar](20) NULL,
	[VOUCHERPHYSICAL] [nvarchar](20) NULL,
	[COSTAMOUNTPHYSICAL] [numeric](28, 12) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_INVENTTRANS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[INVENTDIMID] ASC,
	[INVENTTRANSID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Kerngetallen]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Kerngetallen](
	[Artikelhoofdgroep] [nvarchar](10) NULL,
	[Omzetlijn] [nvarchar](100) NULL,
	[Kerngetal] [decimal](10, 4) NULL,
	[Jaar] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LEDGERBUDGET]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LEDGERBUDGET](
	[ACCOUNTNUM] [nvarchar](20) NULL,
	[STARTDATE] [datetime] NOT NULL,
	[ENDDATE] [datetime] NOT NULL,
	[AMOUNT] [numeric](28, 12) NOT NULL,
	[FREQCODE] [int] NULL,
	[DIMENSION] [nvarchar](10) NULL,
	[DIMENSION2_] [nvarchar](10) NULL,
	[COMMENT_] [nvarchar](60) NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[Valid_From] [datetime] NULL,
	[Valid_To] [datetime] NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LEDGERJOURNALTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LEDGERJOURNALTABLE](
	[JOURNALNUM] [nvarchar](10) NULL,
	[JOURNALTYPE] [int] NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LEDGERTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LEDGERTABLE](
	[ACCOUNTNUM] [varchar](12) NULL,
	[ACCOUNTNAME] [nvarchar](60) NULL,
	[COMPANYGROUPACCOUNT] [nvarchar](10) NULL,
	[CURRENCYCODE] [nvarchar](3) NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LEDGERTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LEDGERTRANS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ACCOUNTNUM] [nvarchar](20) NULL,
	[AMOUNTMST] [numeric](28, 12) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[DIMENSION] [nvarchar](10) NULL,
	[DIMENSION2_] [nvarchar](10) NULL,
	[DIMENSION3_] [nvarchar](10) NULL,
	[DOCUMENTNUM] [nvarchar](20) NULL,
	[JOURNALNUM] [nvarchar](10) NULL,
	[MODIFIEDBY] [nvarchar](5) NULL,
	[MODIFIEDDATETIME] [datetime2](7) NULL,
	[PERIODCODE] [int] NULL,
	[POSTING] [int] NULL,
	[RECID] [bigint] NOT NULL,
	[TRANSDATE] [datetime] NOT NULL,
	[TRANSTYPE] [int] NULL,
	[TXT] [nvarchar](60) NULL,
	[VOUCHER] [nvarchar](20) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_LEDGERTRANS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MARKUPAUTOLINE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MARKUPAUTOLINE](
	[DATAAREAID] [nvarchar](4) NULL,
	[RECID] [bigint] NULL,
	[TABLERECID] [bigint] NULL,
	[VALUE] [numeric](28, 12) NOT NULL,
	[MARKUPCODE] [nvarchar](10) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MARKUPAUTOTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MARKUPAUTOTABLE](
	[DATAAREAID] [nvarchar](4) NULL,
	[RECID] [bigint] NULL,
	[ITEMRELATION] [nvarchar](30) NULL,
	[MODULETYPE] [int] NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MARKUPTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MARKUPTRANS](
	[CALCULATEDAMOUNT] [numeric](28, 12) NOT NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[LINENUM] [numeric](28, 12) NULL,
	[MARKUPCODE] [nvarchar](10) NULL,
	[TRANSRECID] [bigint] NULL,
	[TRANSTABLEID] [int] NULL,
	[VALUE] [numeric](28, 12) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PAYMTERM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PAYMTERM](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[PAYMTERMID] [nvarchar](10) NOT NULL,
	[NUMOFDAYS] [int] NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_PAYMTERM] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[PAYMTERMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PRICEDISCGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PRICEDISCGROUP](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[CGK_NAMEFR] [nvarchar](60) NULL,
	[GROUPID] [nvarchar](10) NOT NULL,
	[MODULE] [int] NOT NULL,
	[NAME] [nvarchar](60) NULL,
	[TYPE] [int] NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_PRICEDISCGROUP] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[GROUPID] ASC,
	[MODULE] ASC,
	[TYPE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PRICEDISCTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PRICEDISCTABLE](
	[ACCOUNTRELATION] [nvarchar](20) NULL,
	[AMOUNT] [numeric](28, 12) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[FROMDATE] [datetime] NOT NULL,
	[ITEMRELATION] [nvarchar](30) NULL,
	[PERCENT1] [numeric](28, 12) NOT NULL,
	[PERCENT2] [numeric](28, 12) NOT NULL,
	[QUANTITYAMOUNT] [numeric](28, 12) NOT NULL,
	[TODATE] [datetime] NOT NULL,
	[RECID] [bigint] NOT NULL,
	[ITEMCODE] [int] NULL,
	[ACCOUNTCODE] [int] NULL,
	[SBA_PRICETYPE] [int] NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_PRICEDISCTABLE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PRODUCT_FIRST_PURCHASE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PRODUCT_FIRST_PURCHASE](
	[DATE] [datetime2](7) NULL,
	[ITEMID] [nvarchar](30) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PURCHLINE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PURCHLINE](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTTRANSID] [varchar](12) NOT NULL,
	[ITEMID] [nvarchar](30) NULL,
	[LINENUM] [numeric](28, 12) NOT NULL,
	[PURCHID] [nvarchar](20) NOT NULL,
	[PURCHSTATUS] [int] NULL,
	[QTYORDERED] [numeric](28, 12) NOT NULL,
	[REMAINPURCHPHYSICAL] [numeric](28, 12) NOT NULL,
	[INVENTREFTRANSID] [nvarchar](20) NULL,
	[LINEAMOUNT] [numeric](28, 12) NOT NULL,
	[PURCHQTY] [numeric](28, 12) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_PURCHLINE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[INVENTTRANSID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PURCHTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PURCHTABLE](
	[CREATEDDATETIME] [datetime] NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[DIMENSION] [nvarchar](10) NOT NULL,
	[INVENTSITEID] [nvarchar](10) NOT NULL,
	[INVOICEACCOUNT] [nvarchar](20) NOT NULL,
	[ORDERACCOUNT] [nvarchar](20) NOT NULL,
	[PURCHID] [varchar](12) NOT NULL,
	[VENDORREF] [nvarchar](60) NULL,
	[SBA_ORDERCATEGORYID] [nvarchar](5) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_PURCHTABLE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[PURCHID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[REQITEMTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[REQITEMTABLE](
	[COVINVENTDIMID] [nvarchar](20) NOT NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[ITEMID] [nvarchar](30) NOT NULL,
	[MAXINVENTONHAND] [numeric](28, 12) NOT NULL,
	[MININVENTONHAND] [numeric](28, 12) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_REQITEMTABLE] PRIMARY KEY CLUSTERED 
(
	[COVINVENTDIMID] ASC,
	[DATAAREAID] ASC,
	[ITEMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SALESLINE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALESLINE](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTREFTYPE] [int] NULL,
	[INVENTTRANSID] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](30) NULL,
	[LINENUM] [numeric](28, 12) NOT NULL,
	[SALESID] [nvarchar](20) NOT NULL,
	[SALESSTATUS] [int] NULL,
	[RECID] [bigint] NULL,
	[INVENTREFID] [nvarchar](20) NULL,
	[SBA_ACTIONCODE] [nvarchar](10) NULL,
	[SALESPRICE] [numeric](28, 12) NOT NULL,
	[SALESQTY] [numeric](28, 12) NOT NULL,
	[LINEAMOUNT] [numeric](28, 12) NOT NULL,
	[LINEPERCENT] [numeric](28, 12) NOT NULL,
	[SALESTABLE_DISCPERCENT] [decimal](28, 12) NULL,
	[SALESTABLE_SALESRESPONSIBLE] [nvarchar](20) NULL,
	[COSTPRICE] [numeric](28, 12) NOT NULL,
	[SBA_PURCHLINEDISC] [numeric](28, 12) NOT NULL,
	[SBA_PURCHLINEPERCENT] [numeric](28, 12) NOT NULL,
	[SBA_PURCHPRICE] [numeric](28, 12) NOT NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_SALESLINE_1] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[INVENTTRANSID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SALESTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SALESTABLE](
	[CUSTACCOUNT] [nvarchar](20) NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[INVENTSITEID] [nvarchar](10) NULL,
	[CREATEDDATETIME] [datetime] NOT NULL,
	[SBA_SALESORDERTYPE] [nvarchar](10) NULL,
	[SBA_COMFORMAT] [nvarchar](10) NULL,
	[SALESORIGINID] [nvarchar](10) NULL,
	[CUSTOMERREF] [nvarchar](60) NULL,
	[PAYMENT] [nvarchar](10) NULL,
	[DLVMODE] [nvarchar](10) NULL,
	[DISCPERCENT] [numeric](28, 12) NOT NULL,
	[SALESRESPONSIBLE] [nvarchar](20) NULL,
	[INVOICEACCOUNT] [nvarchar](20) NULL,
	[SBA_INVOICEPURPOSE] [nvarchar](20) NULL,
	[SALESID] [nvarchar](20) NOT NULL,
	[CGK_CALCDEPARTUREDATE] [datetime] NOT NULL,
	[SBA_DEPARTURETIME] [int] NULL,
	[DELIVERYDATE] [datetime] NULL,
	[MODIFIEDDATETIME] [datetime] NULL,
	[Lineage_Key] [bigint] NULL,
	[Valid_From] [datetime] NULL,
	[Valid_To] [datetime] NULL,
 CONSTRAINT [PK_SALESTABLE] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[SALESID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SBA_COMIDENTIFICATION]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SBA_COMIDENTIFICATION](
	[COMID_2] [nvarchar](30) NULL,
	[REFRECID] [bigint] NULL,
	[RefTableId] [int] NULL,
	[ComFormat] [nvarchar](10) NULL,
	[COM_PASSWORD] [nvarchar](20) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SBA_SMMBUSRELCHARACTERISTICS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SBA_SMMBUSRELCHARACTERISTICS](
	[BUSRELACCOUNT] [nvarchar](20) NOT NULL,
	[CHARACTERISTICID] [nvarchar](20) NULL,
	[FROMDATE] [datetime] NOT NULL,
	[TODATE] [datetime] NOT NULL,
	[SUBCHARACTERISTICID] [nvarchar](20) NULL,
	[Lineage_Key] [bigint] NULL,
	[DESCRIPTION] [nvarchar](60) NOT NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[RECID] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SMMBUSRELTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMMBUSRELTABLE](
	[BUSRELACCOUNT] [varchar](12) NOT NULL,
	[BUSRELTYPEID] [nvarchar](20) NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[PARTYID] [nvarchar](20) NOT NULL,
	[PARTYTYPE] [int] NULL,
	[SBA_NUMBEROFEMPLOYEES] [numeric](28, 12) NOT NULL,
	[EMAIL] [nvarchar](80) NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_SMMBUSRELTABLE] PRIMARY KEY CLUSTERED 
(
	[BUSRELACCOUNT] ASC,
	[DATAAREAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VENDBANKACCOUNT]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VENDBANKACCOUNT](
	[ACCOUNTID] [nvarchar](10) NOT NULL,
	[ACCOUNTNUM] [nvarchar](34) NULL,
	[BANKIBAN] [nvarchar](34) NULL,
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[SWIFTNO] [nvarchar](20) NULL,
	[VENDACCOUNT] [nvarchar](20) NOT NULL,
	[Lineage_Key] [bigint] NULL,
	[EXPIRYDATE] [datetime] NULL,
	[BANKACCOUNTVALIDATIONMETHOD] [int] NULL,
 CONSTRAINT [PK_VENDBANKACCOUNT] PRIMARY KEY CLUSTERED 
(
	[ACCOUNTID] ASC,
	[DATAAREAID] ASC,
	[VENDACCOUNT] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VENDINVOICETRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VENDINVOICETRANS](
	[CREATEDDATETIME] [datetime] NOT NULL,
	[EXTERNALITEMID] [nvarchar](30) NULL,
	[ITEMID] [nvarchar](30) NULL,
	[INVOICEID] [nvarchar](20) NOT NULL,
	[INVOICEDATE] [datetime] NOT NULL,
	[LINEAMOUNT] [numeric](28, 12) NOT NULL,
	[LINENUM] [numeric](28, 12) NOT NULL,
	[ORIGPURCHID] [nvarchar](20) NOT NULL,
	[PURCHID] [nvarchar](20) NOT NULL,
	[QTY] [numeric](28, 12) NOT NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VENDPACKINGSLIPTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VENDPACKINGSLIPTRANS](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[RECID] [bigint] NOT NULL,
	[DELIVERYDATE] [datetime] NOT NULL,
	[INVENTDATE] [datetime] NOT NULL,
	[INVENTTRANSID] [nvarchar](20) NOT NULL,
	[ITEMID] [nvarchar](30) NULL,
	[LINENUM] [numeric](28, 12) NOT NULL,
	[ORDERED] [numeric](28, 12) NOT NULL,
	[ORIGPURCHID] [nvarchar](20) NOT NULL,
	[PACKINGSLIPID] [nvarchar](20) NOT NULL,
	[PURCHID] [nvarchar](20) NOT NULL,
	[QTY] [numeric](28, 12) NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_VENDPACKINGSLIPTRANS] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VENDPURCHORDERJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VENDPURCHORDERJOUR](
	[DATAAREAID] [nvarchar](4) NOT NULL,
	[ORDERACCOUNT] [nvarchar](20) NOT NULL,
	[PURCHASEORDERID] [nvarchar](20) NOT NULL,
	[PURCHID] [nvarchar](20) NOT NULL,
	[PURCHORDERDATE] [datetime] NOT NULL,
	[RECID] [bigint] NOT NULL,
	[Lineage_Key] [bigint] NULL,
 CONSTRAINT [PK_VENDPURCHORDERJOUR] PRIMARY KEY CLUSTERED 
(
	[DATAAREAID] ASC,
	[RECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VENDTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VENDTABLE](
	[ACCOUNTNUM] [nvarchar](20) NULL,
	[NAME] [nvarchar](60) NULL,
	[VENDGROUP] [nvarchar](10) NULL,
	[VATNUM] [nvarchar](20) NULL,
	[COUNTRYREGIONID] [nvarchar](10) NULL,
	[ZIPCODE] [nvarchar](10) NULL,
	[CITY] [nvarchar](60) NULL,
	[STREET] [nvarchar](250) NULL,
	[PAYMTERMID] [nvarchar](10) NULL,
	[PARTYID] [nvarchar](20) NULL,
	[PARTYTYPE] [int] NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[CASHDISC] [nvarchar](10) NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VENDTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VENDTRANS](
	[ACCOUNTNUM] [nvarchar](20) NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[DOCUMENTNUM] [nvarchar](20) NULL,
	[TRANSDATE] [datetime2](7) NULL,
	[VOUCHER] [nvarchar](20) NULL,
	[TRANSTYPE] [int] NULL,
	[Valid_From] [datetime] NULL,
	[Valid_To] [datetime] NULL,
	[Lineage_Key] [bigint] NULL,
	[AMOUNTMST] [numeric](28, 12) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WMSORDERTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WMSORDERTRANS](
	[EXPEDITIONSTATUS] [int] NULL,
	[INVENTTRANSID] [nvarchar](20) NULL,
	[INVENTTRANSREFID] [nvarchar](20) NULL,
	[DATAAREAID] [nvarchar](4) NULL,
	[RECID] [bigint] NULL,
	[Valid_From] [datetime] NULL,
	[Valid_To] [datetime] NULL,
	[Lineage_Key] [bigint] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [exe].[Lineage]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [exe].[Lineage](
	[Lineage_Key] [bigint] IDENTITY(1,1) NOT NULL,
	[Table_Name] [nvarchar](200) NOT NULL,
	[Start_Load] [datetime2](7) NULL,
	[Finish_Load] [datetime2](7) NULL,
	[Last_Loaded_Date] [datetime2](7) NULL,
	[Type] [nvarchar](1) NULL,
	[Load_Status] [nvarchar](1) NULL,
	[Row_Count] [int] NULL,
	[Output_Message] [nvarchar](250) NULL,
	[GUID] [nvarchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [exe].[Table_List]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [exe].[Table_List](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Table_Name] [nvarchar](100) NOT NULL,
	[Load_Type] [nvarchar](1) NOT NULL,
	[Run] [nvarchar](50) NULL,
	[Last_Loaded_Date] [datetime2](7) NULL,
	[Load_Status] [nvarchar](1) NULL,
	[Output_Message] [nvarchar](250) NULL
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[Load_ADDRESS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_ADDRESS]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[ADDRESS]

    INSERT INTO [dbo].[ADDRESS] WITH (TABLOCK) (
      [CITY]
      ,[COUNTRYREGIONID]
      ,DATAAREAID
	  ,[NAME]
      ,[RECID]
      ,[STATE]
      ,[STREET]
      ,[TYPE]
      ,[ZIPCODE]
      ,[Lineage_Key]
    )
    SELECT
      [CITY]
      ,[COUNTRYREGIONID]
      ,DATAAREAID
	  ,[NAME]
      ,[RECID]
      ,[STATE]
      ,[STREET]
      ,[TYPE]
      ,[ZIPCODE]
      ,@LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].[dbo].[ADDRESS]

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_ADDRESSCOUNTRYREGION]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_ADDRESSCOUNTRYREGION]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[ADDRESSCOUNTRYREGION]

    INSERT INTO [dbo].[ADDRESSCOUNTRYREGION] WITH (TABLOCK) (
      [COUNTRYREGIONID]
      ,DATAAREAID
	  ,[NAME]
      ,[ISOCODE]
      ,[Lineage_Key]
    )
    SELECT
      [COUNTRYREGIONID]
      ,DATAAREAID
	  ,[NAME]
      ,[ISOCODE]
      ,@LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].[dbo].[ADDRESSCOUNTRYREGION]

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_ADDRESSSTATE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_ADDRESSSTATE]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[ADDRESSSTATE]

    INSERT INTO [dbo].[ADDRESSSTATE] WITH (TABLOCK) (
      [COUNTRYREGIONID]
      ,[DATAAREAID]
      ,[NAME]
      ,[STATEID]
      ,[Lineage_Key]
    )
    SELECT
      [COUNTRYREGIONID]
      ,[DATAAREAID]
      ,[NAME]
      ,[STATEID]
      ,@LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].[dbo].[ADDRESSSTATE]

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CGK_SALESKPI_TABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CGK_SALESKPI_TABLE]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CGK_SALESKPI_TABLE]

    INSERT INTO [dbo].[CGK_SALESKPI_TABLE] WITH (TABLOCK) (
		   [INVENTSITEID]
	      ,[SALESID]
	      ,[LINENUM]
	      ,[LEVEL1]
	      ,[LEVEL2]
	      ,[LEVEL3]
	      ,[LEVEL4]
	      ,[SOURCE]
	      ,[ITEMID]
	      ,[SALESLINERECID]
	      ,[INVENTREFID]
	      ,[CREATEDDATETIME]
	      ,[CREATEDBY]
		  ,[Lineage_Key]
    )
	SELECT [INVENTSITEID]
	      ,[SALESID]
	      ,[LINENUM]
	      ,[LEVEL1]
	      ,[LEVEL2]
	      ,[LEVEL3]
	      ,[LEVEL4]
	      ,[SOURCE]
	      ,[ITEMID]
	      ,[SALESLINERECID]
	      ,[INVENTREFID]
	      ,[CREATEDDATETIME]
	      ,[CREATEDBY]
	      ,@LineageKey
	  FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].[dbo].[CGK_SALESKPI_TABLE]

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CUSTGROUP]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CUSTGROUP]

    INSERT INTO [dbo].[CUSTGROUP] WITH (TABLOCK) (
        CUSTGROUP,
		DATAAREAID,
        [NAME],
        [Lineage_Key]
    )
    SELECT
        CUSTGROUP,
		DATAAREAID,
        [NAME],
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTGROUP

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTINVOICEJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CUSTINVOICEJOUR]
@LineageKey int
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CUSTINVOICEJOUR]

    INSERT INTO [dbo].[CUSTINVOICEJOUR] WITH (TABLOCK) (
        INVOICEID,
        INVOICEDATE,
        SALESID,
        DIMENSION, 
        DLVMODE, 
        PAYMENT, 
        CUSTOMERREF, 
        SALESORIGINID, 
        SBA_SALESORDERTYPE, 
        ORDERACCOUNT,
		DATAAREAID,
        [Lineage_Key]
    )
    SELECT
        cij.INVOICEID,
        cij.INVOICEDATE,
        cij.SALESID,
        cij.DIMENSION, 
        cij.DLVMODE, 
        cij.PAYMENT, 
        cij.CUSTOMERREF, 
        cij.SALESORIGINID, 
        cij.SBA_SALESORDERTYPE, 
        cij.ORDERACCOUNT,
		cij.DATAAREAID,
        @LineageKey as [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTINVOICEJOUR cij
    WHERE cij.CREATEDDATETIME >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTINVOICETRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CUSTINVOICETRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CUSTINVOICETRANS]

    INSERT INTO [dbo].[CUSTINVOICETRANS] WITH (TABLOCK) (
        INVOICEID,
        INVOICEDATE,
        SALESID,
        LINENUM,
        INVENTTRANSID,
        ITEMID, 
        QTY, 
        LINEAMOUNT, 
        SALESORIGINID, 
        LINEPERCENT, 
        SBA_ENDDISC, 
        SBA_ENDDISCPCT, 
        SALESPRICE,
        SBA_ITEMGROUPID,
        ORIGSALESID,
        SBA_PACKINGSLIPID,
        INVENTREFID,
		INVENTREFTYPE,
        SBA_MAINITEMGROUP, 
        SBA_ITEMGROUP,
        SBA_ACTIONCODE,
		DATAAREAID,
		RECID,
        [Lineage_Key]
    )
    SELECT
        INVOICEID,
        INVOICEDATE,
        SALESID,
        LINENUM,
        INVENTTRANSID,
        ITEMID, 
        QTY, 
        LINEAMOUNT, 
        SALESORIGINID, 
        LINEPERCENT, 
        SBA_ENDDISC, 
        SBA_ENDDISCPCT, 
        SALESPRICE,
        SBA_ITEMGROUPID,
        ORIGSALESID,
        SBA_PACKINGSLIPID,
        INVENTREFID,
		INVENTREFTYPE,
        SBA_MAINITEMGROUP, 
        SBA_ITEMGROUP,
        SBA_ACTIONCODE,
		DATAAREAID,
		RECID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTINVOICETRANS WITH (NOLOCK)
    WHERE CREATEDDATETIME >= DATEFROMPARTS(YEAR(GETDATE())-2, 1, 1)
    AND LINEAMOUNT < 1000000
    AND LINEAMOUNT > -1000000

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTPACKINGSLIPJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CUSTPACKINGSLIPJOUR]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CUSTPACKINGSLIPJOUR]

	    -- Determine the current year once
    DECLARE @Year INT = YEAR(GETDATE())-2;

    -- Get the current date and time once
    DECLARE @CurrentDateTime DATETIME = GETDATE();

        INSERT INTO [dbo].[CUSTPACKINGSLIPJOUR] (
            DATAAREAID,
			RECID,
			[SALESID],
            [PACKINGSLIPID],
            [SBA_CALCDEPARTUREDATE],
            [SBA_CALCDEPARTURETIME],
            [Lineage_Key]
        )
        SELECT
            DATAAREAID,
			RECID,
			[SALESID],
            [PACKINGSLIPID],
            [SBA_CALCDEPARTUREDATE],
            [SBA_CALCDEPARTURETIME],
            @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTPACKINGSLIPJOUR
    WHERE SBA_CALCDEPARTUREDATE >= @Year;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTPACKINGSLIPTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CUSTPACKINGSLIPTRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CUSTPACKINGSLIPTRANS]

    INSERT INTO [dbo].[CUSTPACKINGSLIPTRANS] WITH (TABLOCK) (
        DATAAREAID,
		RECID,
        PACKINGSLIPID,
        LINENUM,
        ORIGSALESID,
        INVENTTRANSID,
        ITEMID,
        QTY,
        DELIVERYDATE,
        VALUEMST,
        CREATEDDATETIME,
        INVENTREFID,
		INVENTREFTYPE,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
		RECID,
        PACKINGSLIPID,
        LINENUM,
        ORIGSALESID,
        INVENTTRANSID,
        ITEMID,
        QTY,
        DELIVERYDATE,
        VALUEMST,
        CREATEDDATETIME,
        INVENTREFID,
		INVENTREFTYPE,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTPACKINGSLIPTRANS
    WHERE CREATEDDATETIME >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTSTATISTICSGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CUSTSTATISTICSGROUP]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CUSTSTATISTICSGROUP]

    INSERT INTO [dbo].[CUSTSTATISTICSGROUP] WITH (TABLOCK) (
        [CUSTSTATISTICSGROUP],
        [STATGROUPNAME],
        [DATAAREAID],   
        [Lineage_Key]
    )
    SELECT
        [CUSTSTATISTICSGROUP],
        [STATGROUPNAME],
        [DATAAREAID],
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTSTATISTICSGROUP

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_CUSTTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[CUSTTABLE]

    INSERT INTO [dbo].[CUSTTABLE] (
        ACCOUNTNUM,
		DATAAREAID,
        [NAME],
        STREET, 
        ZIPCODE, 
        CITY, 
        COUNTRYREGIONID, 
        INVENTSITEID, 
        CUSTGROUP,
        INVOICEACCOUNT, 
        PAYMTERMID, 
        VATNUM, 
        PARTYID, 
        PARTYTYPE,
        SEGMENTID, 
        FOU_CUSTSEGMLVL1, 
        FOU_CUSTSEGMLVL2, 
        FOU_CUSTSEGMLVL3, 
        BLOCKED,
        SBA_CUSTBLOCKSALESORDER,
        RECID,
        SBA_SALESDEPRESPONSIBLEEM20064,
        DLVMODE,
        PAYMMODE,
        PRICEGROUP,
        STATISTICSGROUP,
        SUBSEGMENTID,
        COMPANYCHAINID,
        BANKCENTRALBANKPURPOSECODE,
		MAINCONTACTID,
		LANGUAGEID,
		SBA_OLDCUSTOMERNUMBER,
        [Lineage_Key]
    )
    SELECT
        ACCOUNTNUM,
		DATAAREAID,
        [NAME],
        STREET, 
        ZIPCODE, 
        CITY, 
        COUNTRYREGIONID, 
        INVENTSITEID, 
        CUSTGROUP,
        INVOICEACCOUNT, 
        PAYMTERMID, 
        VATNUM, 
        PARTYID, 
        PARTYTYPE,
        SEGMENTID, 
        FOU_CUSTSEGMLVL1, 
        FOU_CUSTSEGMLVL2, 
        FOU_CUSTSEGMLVL3, 
        BLOCKED,
        SBA_CUSTBLOCKSALESORDER,
        RECID,
        SBA_SALESDEPRESPONSIBLEEM20064,
        DLVMODE,
        PAYMMODE,
        PRICEGROUP,
        STATISTICSGROUP,
        SUBSEGMENTID,
        COMPANYCHAINID,
        BANKCENTRALBANKPURPOSECODE,
		MAINCONTACTID,
		LANGUAGEID,
		SBA_OLDCUSTOMERNUMBER,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTTABLE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_CUSTVENDEXTERNALITEM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[Load_CUSTVENDEXTERNALITEM]
    @LineageKey int
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

	TRUNCATE TABLE [dbo].[CUSTVENDEXTERNALITEM]

    INSERT INTO [dbo].[CUSTVENDEXTERNALITEM] (
	  [ABCCATEGORY]
      ,[CUSTVENDRELATION]
      ,[DATAAREAID]
      ,[EXTERNALITEMID]
      ,[MODULETYPE]
      ,[INVENTDIMID]
      ,[ITEMID]
      ,[SBA_ITEMGROUPVENDCODE]
      ,[Lineage_Key]
    )
    SELECT
	  [ABCCATEGORY]
      ,[CUSTVENDRELATION]
      ,[DATAAREAID]
      ,[EXTERNALITEMID]
      ,[MODULETYPE]
      ,[INVENTDIMID]
      ,[ITEMID]
      ,[SBA_ITEMGROUPVENDCODE]
      ,@LineageKey as [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.CUSTVENDEXTERNALITEM

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DATAAREA]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Load_DATAAREA]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

        TRUNCATE TABLE [dbo].[DATAAREA];

        INSERT INTO [dbo].[DATAAREA] (
            ID,
            Description,
            [Lineage_Key]
        )
        SELECT 
            ID,
            ID + ' - ' + [NAME] AS Description,
            @LineageKey AS [Lineage_Key]
        FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DATAAREA
        WHERE ISVIRTUAL = 0;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DIMENSIONS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_DIMENSIONS]
@LineageKey int
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DIMENSIONS]

    INSERT INTO [dbo].[DIMENSIONS] (
        [DATAAREAID],
        [DIMENSIONCODE],
        [NUM],
		[DESCRIPTION],
        [INCHARGE],
        [CLOSED],
        [COMPANYGROUP],
        [Lineage_Key]
    )
    SELECT
        [DATAAREAID],
        [DIMENSIONCODE],
        [NUM],
		[DESCRIPTION],
        [INCHARGE],
        [CLOSED],
        [COMPANYGROUP],
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DIMENSIONS;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DIRECOMMUNICATIONADDRESS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_DIRECOMMUNICATIONADDRESS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DIRECOMMUNICATIONADDRESS];

    INSERT INTO [dbo].[DIRECOMMUNICATIONADDRESS] (
        EMAIL,
		DATAAREAID,
        RECID,
        ECOMMUNICATIONTYPEID,
        [Lineage_Key]
    )
    SELECT
        EMAIL,
		DATAAREAID,
        RECID,
        ECOMMUNICATIONTYPEID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DIRECOMMUNICATIONADDRESS

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DIRORGANIZATIONDETAIL]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_DIRORGANIZATIONDETAIL]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DIRORGANIZATIONDETAIL]

    INSERT INTO [dbo].[DIRORGANIZATIONDETAIL] (
        DATAAREAID,
		PARTYID,
        ABC,
        SBA_COMMERCENUMCHAMBER,
        ORGNUMBER,
        NUMBEROFEMPLOYEES,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
        PARTYID,
        ABC,
        SBA_COMMERCENUMCHAMBER,
        ORGNUMBER,
        NUMBEROFEMPLOYEES,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DIRORGANIZATIONDETAIL;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DIRPARTYADDRESSRELATIONSHI1066]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
create   PROCEDURE [dbo].[Load_DIRPARTYADDRESSRELATIONSHI1066]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DIRPARTYADDRESSRELATIONSHI1066]

    INSERT INTO [dbo].[DIRPARTYADDRESSRELATIONSHI1066] (
        DATAAREAID,
        ADDRESSRECID,
        PARTYADDRESSRELATIONSHIPRECID,
		REFCOMPANYID,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
        ADDRESSRECID,
        PARTYADDRESSRELATIONSHIPRECID,
		REFCOMPANYID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DIRPARTYADDRESSRELATIONSHI1066;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DIRPARTYADDRESSRELATIONSHIP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_DIRPARTYADDRESSRELATIONSHIP]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DIRPARTYADDRESSRELATIONSHIP]

    INSERT INTO [dbo].[DIRPARTYADDRESSRELATIONSHIP] (
 		[DATAAREAID]
		,[ISPRIMARY]
		,[PARTYID]
		,[RECID]
		,[STATUS]
        ,[Lineage_Key]
    )
    SELECT
		[DATAAREAID]
		,[ISPRIMARY]
		,[PARTYID]
		,[RECID]
		,[STATUS]
        ,@LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DIRPARTYADDRESSRELATIONSHIP

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DIRPARTYECOMMUNICATIONRELA2608]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_DIRPARTYECOMMUNICATIONRELA2608]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DIRPARTYECOMMUNICATIONRELA2608]

    INSERT INTO [dbo].[DIRPARTYECOMMUNICATIONRELA2608] (
        DATAAREAID,
        PARTYID,
        STATUS,
        VALUESRECID,
		RECID,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
        PARTYID,
        STATUS,
        VALUESRECID,
		RECID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DIRPARTYECOMMUNICATIONRELA2608

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DIRPARTYTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_DIRPARTYTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DIRPARTYTABLE]

    INSERT INTO [dbo].[DIRPARTYTABLE] (
        DATAAREAID,
		PARTYID,
        [TYPE],
        [NAME],
		RECID,
        SBA_DIRPARTYSTATISTICSGROUPID,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
		PARTYID,
        [TYPE],
        [NAME],
		RECID,
        SBA_DIRPARTYSTATISTICSGROUPID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DIRPARTYTABLE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_DOCUREF]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_DOCUREF]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[DOCUREF]

    INSERT INTO [dbo].[DOCUREF] (
		[REFTABLEID]
		,[REFRECID]
		,[NAME]
		,[TYPEID]
		,[REFCOMPANYID]
		,[RESTRICTION]
		,[CREATEDDATETIME]
		,[SBA_CONTACTREMINDER]
		,[NOTES]
		,RECID
		,[Lineage_Key]
    )
    SELECT
		[REFTABLEID]
		,[REFRECID]
		,[NAME]
		,[TYPEID]
		,[REFCOMPANYID]
		,[RESTRICTION]
		,[CREATEDDATETIME]
		,[SBA_CONTACTREMINDER]
		,[NOTES]
		,RECID
        ,@LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.DOCUREF

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_EMPLTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_EMPLTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[EMPLTABLE]

    INSERT INTO [dbo].[EMPLTABLE] (
        DATAAREAID,
		EMPLID,
        PARTYID,
		ALTNUM,
        [Lineage_Key]
    )
    SELECT
		DATAAREAID,
        EMPLID,
        PARTYID,
		ALTNUM,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.EMPLTABLE;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_FOU_CPBTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_FOU_CPBTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[FOU_CPBTABLE]

    INSERT INTO [dbo].[FOU_CPBTABLE] (
        [DESCRIPTION],
        [CPB],
        Valid_From,
        Valid_To,
        [Lineage_Key]
    )
    SELECT
        [DESCRIPTION],
        [CPB],
        GETDATE() AS Valid_From,
        CONVERT(datetime, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.FOU_CPBTABLE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_FOU_CPGTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_FOU_CPGTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[FOU_CPGTABLE]

    INSERT INTO [dbo].[FOU_CPGTABLE] (
        [DESCRIPTION],
        [CPG],
        Valid_From,
        Valid_To,
        [Lineage_Key]
    )
    SELECT
        [DESCRIPTION],
        [CPG],
        GETDATE() AS Valid_From,
        CONVERT(datetime, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.FOU_CPGTABLE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTCOUNTJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTCOUNTJOUR]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTCOUNTJOUR]

    INSERT INTO [dbo].[INVENTCOUNTJOUR] (
        [JOURNALID],
        [INVENTDIMID],
        [ITEMID],
        [COUNTEDQTY],
        [INVENTONHAND],
        [COUNTDATE],
        Valid_From,
        Valid_To,
        [Lineage_Key]
    )
    SELECT
        t.JOURNALID,
        t.INVENTDIMID,
        t.ITEMID,
        t.COUNTEDQTY,
        t.INVENTONHAND,
        t.COUNTDATE,
        GETDATE() AS Valid_From,
        CONVERT(datetime, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM (
        SELECT
            cj.JOURNALID,
            cj.INVENTDIMID,
            cj.ITEMID,
            cj.COUNTEDQTY,
            cj.INVENTONHAND,
            cj.COUNTDATE,
            ROW_NUMBER() OVER (PARTITION BY cj.JOURNALID, cj.INVENTDIMID, cj.ITEMID, cj.COUNTDATE ORDER BY cj.RECID) AS ranked
        FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTCOUNTJOUR cj 
        WHERE cj.DATAAREAID = '100' 
        AND cj.COUNTDATE >= DATEFROMPARTS(YEAR(GETDATE()), 1, 1)
    ) t
    WHERE t.ranked = 1

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTDIM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTDIM]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTDIM]

    INSERT INTO [dbo].[INVENTDIM] (
        DATAAREAID,
		INVENTDIMID,
        INVENTSITEID,
        INVENTLOCATIONID,
        WMSLOCATIONID,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
        INVENTDIMID,
        INVENTSITEID,
        INVENTLOCATIONID,
        WMSLOCATIONID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTDIM

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTITEMGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTITEMGROUP]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTITEMGROUP]

    INSERT INTO [dbo].[INVENTITEMGROUP] (
        ITEMGROUPID,
        NAME,
        [Lineage_Key]
    )
    SELECT
        ITEMGROUPID,
        NAME,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTITEMGROUP

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTITEMGTIN]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTITEMGTIN]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTITEMGTIN]

    INSERT INTO [dbo].[INVENTITEMGTIN] (
        DATAAREAID,
		GTIN, 
        ITEMID,
		INVENTDIMID,
        UNITID,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
		GTIN, 
        ITEMID,
		INVENTDIMID,
        UNITID,
        @LineageKey as [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTITEMGTIN;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTITEMPRICE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTITEMPRICE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

	DECLARE @LastLoadDate DATETIME2(7) = (SELECT max(CREATEDDATETIME) FROM [dbo].[INVENTITEMPRICE]);

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTITEMPRICE]

    INSERT INTO [dbo].[INVENTITEMPRICE] WITH (TABLOCK) (
        ACTIVATIONDATE,
		CREATEDDATETIME,
		DATAAREAID,
		INVENTDIMID,
        ITEMID,
        PRICE,
		PRICETYPE,
        [Lineage_Key]
    )
    SELECT DISTINCT
        ACTIVATIONDATE,
		CREATEDDATETIME,
		DATAAREAID,
		INVENTDIMID,
        ITEMID,
        PRICE,
		PRICETYPE,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTITEMPRICE
    WHERE 
	(@LastLoadDate IS NULL AND ACTIVATIONDATE >= DATEFROMPARTS(YEAR(GETDATE())-3, 1, 1))
		OR (@LastLoadDate IS NOT NULL AND CREATEDDATETIME >= @LastLoadDate)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTITEMPURCHSETUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTITEMPURCHSETUP]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTITEMPURCHSETUP]

    INSERT INTO [dbo].[INVENTITEMPURCHSETUP] (
        DATAAREAID,
		ITEMID,
        INVENTDIMID,
        LOWESTQTY,
        MULTIPLEQTY,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
		ITEMID,
        INVENTDIMID,
        LOWESTQTY,
        MULTIPLEQTY,
        @LineageKey as [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTITEMPURCHSETUP;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTJOURNALTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTJOURNALTRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTJOURNALTRANS]

    INSERT INTO [dbo].[INVENTJOURNALTRANS] (
        [JOURNALID],
        [ITEMID],
        [INVENTDIMID],
        [TRANSDATE],
        [COUNTED],
        [COSTPRICE],
        [COSTAMOUNT],
        [RECID],
		[MODIFIEDDATETIME],
        Valid_From, 
        Valid_To,
        [Lineage_Key]
    )
    SELECT
        t.JOURNALID,
        t.ITEMID,
        t.INVENTDIMID,
        t.TRANSDATE,
        t.COUNTED,
        t.COSTPRICE,
        t.COSTAMOUNT,
        t.RECID,
		t.[MODIFIEDDATETIME],
        GETDATE() AS Valid_From,
        CONVERT(datetime, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM (
        SELECT
            ijtr.JOURNALID,
            ijtr.ITEMID,
            ijtr.INVENTDIMID,
            ijtr.TRANSDATE,
            ijtr.COUNTED,
            ijtr.COSTPRICE,
            ijtr.COSTAMOUNT,
            ijtr.RECID,
			ijtr.[MODIFIEDDATETIME],
            ROW_NUMBER() OVER (PARTITION BY ijtr.JOURNALID, ijtr.INVENTDIMID, ijtr.ITEMID, ijtr.TRANSDATE ORDER BY ijtr.RECID) AS ranked
        FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTJOURNALTRANS ijtr
        WHERE ijtr.DATAAREAID = '100'
        AND ijtr.TRANSDATE >= DATEFROMPARTS(YEAR(GETDATE()), 1, 1)
    ) t
    WHERE t.ranked = 1

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTPOSTING]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTPOSTING]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTPOSTING]

    INSERT INTO [dbo].[INVENTPOSTING] (
        ITEMRELATION,
        LEDGERACCOUNTID,
        [Lineage_Key]
    )
    SELECT
        ITEMRELATION,
        LEDGERACCOUNTID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTPOSTING
    WHERE INVENTACCOUNTTYPE = 23

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTSITE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTSITE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTSITE]

    INSERT INTO [dbo].[INVENTSITE] (
        SITEID, 
        [NAME],
        [Lineage_Key]
    )
    SELECT
        SITEID, 
        [NAME],
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTSITE
    WHERE DATAAREAID = '100'

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTSUM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTSUM]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTSUM]

    INSERT INTO [dbo].[INVENTSUM] (
		CLOSED,
		CLOSEDQTY,
        [DATAAREAID],
		[INVENTDIMID],
        [ITEMID],
        [AVAILPHYSICAL],
		PHYSICALINVENT,
        [Lineage_Key]
    )
    SELECT
		CLOSED,
		CLOSEDQTY,
        DATAAREAID,
		INVENTDIMID,
        ITEMID,
        AVAILPHYSICAL,
		PHYSICALINVENT,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTSUM

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTSUM CYCLECOUNT]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTSUM CYCLECOUNT]
@LineageKey INT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTSUM CYCLECOUNT]

    INSERT INTO [dbo].[INVENTSUM CYCLECOUNT] (
			[INVENTDIMID]
			,[ITEMID]
			,[AVAILPHYSICAL]
			,[INVENTDIM_INVENTSITEID]
			,[Lineage_Key]
    )
    SELECT
			s.INVENTDIMID
			,s.ITEMID
			,s.AVAILPHYSICAL
			-- INVENTDIM info
			,d.INVENTSITEID as INVENTDIM_INVENTSITEID
			,@LineageKey AS [Lineage_Key]
	from	[AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTDIM d
		join	[AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTSUM s 
		on	d.DATAAREAID = s.DATAAREAID
		and	s.INVENTDIMID = d.INVENTDIMID
	where	d.DATAAREAID = '100' 
		and		Cast(d.INVENTLOCATIONID as nvarchar(25)) = d.INVENTSITEID + '010'
		and		d.WMSLOCATIONID <> ''
		-- include active item locations
		and		s.CLOSED = 0
		and		s.CLOSEDQTY = 0

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTTABLE]

    INSERT INTO [dbo].[INVENTTABLE] (
		ITEMID,
        ITEMNAME,
        ITEMGROUPID,
        PRIMARYVENDORID, 
        NETWEIGHT, 
        ORIGCOUNTRYREGIONID,
        FOU_CPB, 
        FOU_CPG, 
        SBA_ITEMGROUP, 
        SBA_MAINITEMGROUP,
        SBA_RAI_ONSTOCKCODEVENDOR, 
        SBA_ITEMBLOCKSALES, 
        SBA_RETURNDEPOSITITEM, 
        USEALTITEMID, 
        ALTITEMID,
        SBA_INVENTITEMSTATUS,
        CREATEDDATETIME,
        SBA_RAI_STATUSCODE,
        SBA_ITEMTYPE,
        NAMEALIAS,
        SBA_ITEMBLOCKPURCH,
        SBA_TECDOCITEMID,
        SBA_TECDOCBRANDID,
		SBA_TECDOCGENERICITEM,
        ITEMTYPE,
        UNITVOLUME,
		DATAAREAID,
		FOU_SKU,
        [Lineage_Key]
    )
    SELECT
		ITEMID,
        ITEMNAME,
        ITEMGROUPID,
        PRIMARYVENDORID, 
        NETWEIGHT, 
        ORIGCOUNTRYREGIONID,
        CASE WHEN FOU_CPB IS NOT NULL AND FOU_CPB <> '' 
             THEN FOU_CPB 
             ELSE 0 
        END AS FOU_CPB, 
        FOU_CPG, 
        SBA_ITEMGROUP, 
        SBA_MAINITEMGROUP,
        SBA_RAI_ONSTOCKCODEVENDOR, 
        SBA_ITEMBLOCKSALES, 
        SBA_RETURNDEPOSITITEM, 
        USEALTITEMID, 
        CASE WHEN ALTITEMID IS NOT NULL 
             THEN ALTITEMID 
             ELSE '' 
        END AS ALTITEMID,
        SBA_INVENTITEMSTATUS,
        dbo.fn_AdjustDateTimeWithDaylightSaving(CREATEDDATETIME) as CREATEDDATETIME,
        SBA_RAI_STATUSCODE,
        SBA_ITEMTYPE,
        NAMEALIAS,
        SBA_ITEMBLOCKPURCH,
        SBA_TECDOCITEMID,
        SBA_TECDOCBRANDID,
		SBA_TECDOCGENERICITEM,
        ITEMTYPE,
        UNITVOLUME,
		DATAAREAID,
		FOU_SKU,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTTABLE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTTABLEMODULE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTTABLEMODULE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

TRUNCATE TABLE [dbo].[INVENTTABLEMODULE]

INSERT INTO [dbo].[INVENTTABLEMODULE] (
		DATAAREAID,
		ITEMID, 
		MODULETYPE, 
		PRICE, 
		PRICEQTY, 
		PRICEUNIT, 
		MARKUPGROUPID,
		LINEDISC,
		[Lineage_Key]
)
select	DATAAREAID,
		ITEMID, 
		MODULETYPE, 
		PRICE, 
		PRICEQTY, 
		PRICEUNIT, 
		MARKUPGROUPID,
		LINEDISC,
		@LineageKey as [Lineage_Key]
FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTTABLEMODULE;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_INVENTTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_INVENTTRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[INVENTTRANS]

    INSERT INTO [dbo].[INVENTTRANS] (
        RECID,
        INVENTTRANSID,
        ITEMID, 
        INVENTDIMID,
        TRANSTYPE,
        COSTAMOUNTOPERATIONS,
        COSTAMOUNTPOSTED,
        COSTAMOUNTADJUSTMENT,
        COSTAMOUNTSETTLED,
        QTY, 
        DATEFINANCIAL,
        INVOICEID,
        VOUCHERPHYSICAL,
        DATEPHYSICAL,
        TRANSREFID,
        PACKINGSLIPID,
		DATAAREAID,
        COSTAMOUNTPHYSICAL,
        [Lineage_Key]
    )
    SELECT
        RECID,
        INVENTTRANSID,
        ITEMID, 
        INVENTDIMID,
        TRANSTYPE,
        COSTAMOUNTOPERATIONS,
        CASE WHEN COSTAMOUNTPOSTED IS NOT NULL THEN COSTAMOUNTPOSTED ELSE 0 END AS COSTAMOUNTPOSTED,
        CASE WHEN COSTAMOUNTADJUSTMENT IS NOT NULL THEN COSTAMOUNTADJUSTMENT ELSE 0 END AS COSTAMOUNTADJUSTMENT,
        CASE WHEN COSTAMOUNTSETTLED IS NOT NULL THEN COSTAMOUNTSETTLED ELSE 0 END AS COSTAMOUNTSETTLED,
        QTY, 
        DATEFINANCIAL,
        INVOICEID,
        VOUCHERPHYSICAL,
        DATEPHYSICAL,
        TRANSREFID,
        PACKINGSLIPID,
		DATAAREAID,
        CASE WHEN COSTAMOUNTPHYSICAL IS NOT NULL THEN COSTAMOUNTPHYSICAL ELSE 0 END AS COSTAMOUNTPHYSICAL,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTTRANS
    WHERE DATAAREAID = '100'
    AND DATEPHYSICAL >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_LEDGERBUDGET]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_LEDGERBUDGET]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[LEDGERBUDGET]

    INSERT INTO [dbo].[LEDGERBUDGET] (
        ACCOUNTNUM,
        STARTDATE,
        ENDDATE,
        AMOUNT,
        FREQCODE,
        DIMENSION,
        DIMENSION2_,
        COMMENT_,
        DATAAREAID,
        Valid_From,
        Valid_To,
        [Lineage_Key]
    )
    SELECT
        ACCOUNTNUM,
        STARTDATE,
        ENDDATE,
        AMOUNT,
        FREQCODE,
        DIMENSION,
        DIMENSION2_,
        COMMENT_,
        DATAAREAID,
        GETDATE() AS Valid_From,
        CONVERT(datetime, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.LEDGERBUDGET
    WHERE YEAR(STARTDATE) = YEAR(GETDATE()) AND FREQCODE = 1

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_LEDGERJOURNALTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_LEDGERJOURNALTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[LEDGERJOURNALTABLE]

    INSERT INTO [dbo].[LEDGERJOURNALTABLE] (
        JOURNALNUM,
        JOURNALTYPE,
        DATAAREAID,
        [Lineage_Key]
    )
    SELECT DISTINCT
        JOURNALNUM,
        JOURNALTYPE,
        DATAAREAID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.LEDGERJOURNALTABLE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_LEDGERTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_LEDGERTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[LEDGERTABLE]

    INSERT INTO [dbo].[LEDGERTABLE] (
        ACCOUNTNUM,
        ACCOUNTNAME,
		DATAAREAID,
        COMPANYGROUPACCOUNT,
        CURRENCYCODE,
        [Lineage_Key]
    )
    SELECT
        ACCOUNTNUM,
        ACCOUNTNAME,
		DATAAREAID,
        COMPANYGROUPACCOUNT,
        CURRENCYCODE,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.LEDGERTABLE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_MARKUPAUTOLINE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_MARKUPAUTOLINE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[MARKUPAUTOLINE]

    INSERT INTO [dbo].[MARKUPAUTOLINE] (
        TABLERECID,
        RECID,
		DATAAREAID,
		MARKUPCODE,
		[VALUE],
        [Lineage_Key]
    )
    SELECT
        TABLERECID,
        RECID,
		DATAAREAID,
		MARKUPCODE,
        [VALUE],
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.MARKUPAUTOLINE

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_MARKUPAUTOTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_MARKUPAUTOTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[MARKUPAUTOTABLE]

    INSERT INTO [dbo].[MARKUPAUTOTABLE] (
        RECID,
        ITEMRELATION,
		DATAAREAID,
        MODULETYPE,
        [Lineage_Key]
    )
    SELECT
        RECID,
        ITEMRELATION,
		DATAAREAID,
        MODULETYPE,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.MARKUPAUTOTABLE;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_MARKUPTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
create   PROCEDURE [dbo].[Load_MARKUPTRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[MARKUPTRANS]

	INSERT INTO [dbo].[MARKUPTRANS] (
	    [CALCULATEDAMOUNT],
	    [DATAAREAID],
	    [LINENUM],
	    [MARKUPCODE],
	    [TRANSRECID],
	    [TRANSTABLEID],
	    [VALUE]
	)
	SELECT
	    [CALCULATEDAMOUNT],
	    [DATAAREAID],
	    [LINENUM],
	    [MARKUPCODE],
	    [TRANSRECID],
	    [TRANSTABLEID],
	    [VALUE]
	FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].[dbo].[MARKUPTRANS];


		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_PAYMTERM]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_PAYMTERM]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[PAYMTERM]

    INSERT INTO [dbo].[PAYMTERM] (
		DATAAREAID,
		PAYMTERMID,
		NUMOFDAYS,
        [Lineage_Key]
    )
    SELECT
		DATAAREAID,
		PAYMTERMID,
		NUMOFDAYS,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.PAYMTERM;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_PRICEDISCGROUP]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_PRICEDISCGROUP]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[PRICEDISCGROUP]

    INSERT INTO [dbo].[PRICEDISCGROUP] (
		DATAAREAID,
		GROUPID,
        MODULE,
        TYPE,
        NAME,
        [Lineage_Key]
    )
    SELECT
		DATAAREAID,
		GROUPID,
        MODULE,
        TYPE,
        NAME,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.PRICEDISCGROUP


		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_PRICEDISCTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_PRICEDISCTABLE]
@LineageKey int
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[PRICEDISCTABLE]

    INSERT INTO [dbo].[PRICEDISCTABLE] (
        DATAAREAID,
		RECID,
        ITEMRELATION,
        ACCOUNTRELATION,
        FROMDATE,
        TODATE,
        QUANTITYAMOUNT,
        AMOUNT,
        PERCENT1,
        PERCENT2,
        ITEMCODE,
        ACCOUNTCODE,
        SBA_PRICETYPE,
        [Lineage_Key]
    )
    SELECT
        DATAAREAID,
		RECID,
        ITEMRELATION,
        ACCOUNTRELATION,
        FROMDATE,
        CASE WHEN YEAR(TODATE) = 1900 
             THEN CAST('2099-12-31' AS DATETIME) 
             ELSE TODATE 
        END AS TODATE,
        QUANTITYAMOUNT,
        AMOUNT,
        PERCENT1,
        PERCENT2,
        ITEMCODE,
        ACCOUNTCODE,
        SBA_PRICETYPE,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.PRICEDISCTABLE;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_PRODUCT_FIRST_PURCHASE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_PRODUCT_FIRST_PURCHASE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[PRODUCT_FIRST_PURCHASE]

    INSERT INTO [dbo].[PRODUCT_FIRST_PURCHASE] (
        ITEMID,
        DATE,
        [Lineage_Key]
    )
    SELECT
        ITEMID,
        dbo.fn_AdjustDateTimeWithDaylightSaving(MIN(DATEPHYSICAL)) AS [DATE],
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.INVENTTRANS
    WHERE DATAAREAID = '100'
    AND TRANSTYPE = 3 -- 3 = Inkooporder
    AND QTY > 0
    AND DATEPHYSICAL <> 0 -- To exclude all deliveries that are still on the way
    GROUP BY ITEMID

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_PURCHLINE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_PURCHLINE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[PURCHLINE]

    INSERT INTO [dbo].[PURCHLINE] (
        PURCHID,
        LINENUM,
        INVENTTRANSID,
        ITEMID,
        REMAINPURCHPHYSICAL,
        QTYORDERED,
        PURCHSTATUS,
        INVENTREFTRANSID,
        LINEAMOUNT,
        PURCHQTY,
		DATAAREAID,
        [Lineage_Key]
    )
    SELECT
        PURCHID,
        LINENUM,
        INVENTTRANSID,
        ITEMID,
        REMAINPURCHPHYSICAL,
        QTYORDERED,
        PURCHSTATUS,
        INVENTREFTRANSID,
        LINEAMOUNT,
        PURCHQTY,
		DATAAREAID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.PURCHLINE
    WHERE CREATEDDATETIME >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_PURCHTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_PURCHTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[PURCHTABLE]

    INSERT INTO [dbo].[PURCHTABLE] (
        PURCHID,
        ORDERACCOUNT, 
        INVOICEACCOUNT, 
        DIMENSION, 
		DATAAREAID,
        INVENTSITEID, 
        CREATEDDATETIME,
        VENDORREF,
        SBA_ORDERCATEGORYID,
        [Lineage_Key]
    )
    SELECT
        PURCHID,
        ORDERACCOUNT, 
        INVOICEACCOUNT, 
        DIMENSION, 
		DATAAREAID,
        INVENTSITEID, 
        CREATEDDATETIME,
        VENDORREF,
        SBA_ORDERCATEGORYID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.PURCHTABLE
    WHERE CREATEDDATETIME >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_REQITEMTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_REQITEMTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[REQITEMTABLE]

    INSERT INTO [dbo].[REQITEMTABLE] (
        ITEMID,
        COVINVENTDIMID,
		DATAAREAID,
        MININVENTONHAND,
        MAXINVENTONHAND,
        [Lineage_Key]
    )
    SELECT
        ITEMID,
        COVINVENTDIMID,
		DATAAREAID,
        MININVENTONHAND,
        MAXINVENTONHAND,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.REQITEMTABLE;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_SALESLINE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_SALESLINE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[SALESLINE]

    INSERT INTO [dbo].[SALESLINE] (
		DATAAREAID,
        RECID,
        SALESID,
        LINENUM,
        ITEMID,
        INVENTTRANSID,
        SALESSTATUS,
        LINEPERCENT,
        LINEAMOUNT,
        SALESQTY,
        SALESPRICE,
        SBA_ACTIONCODE,
        INVENTREFID,
        COSTPRICE,
        SBA_PURCHPRICE,
        SBA_PURCHLINEPERCENT,
        SBA_PURCHLINEDISC,
        CREATEDDATETIME,
		INVENTREFTYPE,
        [Lineage_Key]
    )
    SELECT
		l.DATAAREAID,
        l.RECID,
        l.SALESID,
        ROW_NUMBER() OVER (PARTITION BY l.SALESID ORDER BY l.SALESID, l.LINENUM) AS LINENUM,
        l.ITEMID,
        l.INVENTTRANSID,
        l.SALESSTATUS,
        l.LINEPERCENT,
        l.LINEAMOUNT,
        l.SALESQTY,
        l.SALESPRICE,
        l.SBA_ACTIONCODE,
        l.INVENTREFID,
        l.COSTPRICE,
        l.SBA_PURCHPRICE,
        l.SBA_PURCHLINEPERCENT,
        l.SBA_PURCHLINEDISC,
        l.CREATEDDATETIME,
		l.INVENTREFTYPE,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.SALESTABLE s
    JOIN [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.SALESLINE l ON l.SALESID = s.SALESID
    WHERE s.DATAAREAID = '100'
    AND s.CREATEDDATETIME >= DATEFROMPARTS(YEAR(GETDATE())-2, 1, 1)
    AND l.SALESPRICE < 1000000
    AND l.SALESPRICE > -1000000 
    AND l.LINEAMOUNT < 1000000
    AND l.LINEAMOUNT > -1000000

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_SALESTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_SALESTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[SALESTABLE];

    -- Determine the current year once
    DECLARE @Year INT = YEAR(GETDATE())-2;

    -- Get the current date and time once
    DECLARE @CurrentDateTime DATETIME = GETDATE();

    INSERT INTO [dbo].[SALESTABLE] (
        [CUSTACCOUNT],
		DATAAREAID,
        [INVENTSITEID],
        [CREATEDDATETIME],
        [SBA_SALESORDERTYPE],
        [SBA_COMFORMAT],
        [SALESORIGINID],
        [CUSTOMERREF],
        [PAYMENT],
        [DLVMODE],
        [DISCPERCENT],
        [SALESRESPONSIBLE],
        [INVOICEACCOUNT],
        [SBA_INVOICEPURPOSE],
        [SALESID],
        [CGK_CALCDEPARTUREDATE],
        [SBA_DEPARTURETIME],
        [MODIFIEDDATETIME],
        [DELIVERYDATE],
        Valid_From,
        Valid_To,
        [Lineage_Key]
    )
    SELECT
        [CUSTACCOUNT],
		DATAAREAID,
        [INVENTSITEID],
        [CREATEDDATETIME],
        [SBA_SALESORDERTYPE],
        [SBA_COMFORMAT],
        [SALESORIGINID],
        [CUSTOMERREF],
        [PAYMENT],
        [DLVMODE],
        [DISCPERCENT],
        [SALESRESPONSIBLE],
        [INVOICEACCOUNT],
        [SBA_INVOICEPURPOSE],
        [SALESID],
        [CGK_CALCDEPARTUREDATE],
        [SBA_DEPARTURETIME],
        [MODIFIEDDATETIME],
        [DELIVERYDATE],
        @CurrentDateTime AS Valid_From,
        CONVERT(DATETIME, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.SALESTABLE
    WHERE YEAR(DELIVERYDATE) >= @Year

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_SBA_COMIDENTIFICATION]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_SBA_COMIDENTIFICATION]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[SBA_COMIDENTIFICATION]

    INSERT INTO [dbo].[SBA_COMIDENTIFICATION] (
        COMID_2,
        [REFRECID],
        RefTableId,
        ComFormat,
        COM_PASSWORD,
        [Lineage_Key]
    )
    SELECT
        COMID_2,
        [REFRECID],
        REFTABLEID,
        COMFORMAT,
        COM_PASSWORD,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.SBA_COMIDENTIFICATION
    WHERE DATAAREAID = '100'

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_SBA_SMMBUSRELCHARACTERISTICS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_SBA_SMMBUSRELCHARACTERISTICS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[SBA_SMMBUSRELCHARACTERISTICS]

    INSERT INTO [dbo].[SBA_SMMBUSRELCHARACTERISTICS] (
        BUSRELACCOUNT,
        CHARACTERISTICID,
        SUBCHARACTERISTICID,
        FROMDATE,
        TODATE,
		DESCRIPTION,
		DATAAREAID,
		RECID,
        [Lineage_Key]
    )
    SELECT
        BUSRELACCOUNT,
        CHARACTERISTICID,
        SUBCHARACTERISTICID,
        FROMDATE,
        CASE WHEN YEAR(TODATE) = 1900 
             THEN CAST('2099-12-31' AS DATETIME) 
             ELSE TODATE 
        END AS TODATE,
		DESCRIPTION,
		DATAAREAID,
		RECID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.SBA_SMMBUSRELCHARACTERISTICS
    WHERE DATAAREAID = '100'

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_SMMBUSRELTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_SMMBUSRELTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[SMMBUSRELTABLE]

    INSERT INTO [dbo].[SMMBUSRELTABLE] (
        BUSRELACCOUNT,
        PARTYID,
        PARTYTYPE,
        BUSRELTYPEID,
		DATAAREAID,
        SBA_NUMBEROFEMPLOYEES,
        EMAIL,
        [Lineage_Key]
    )
    SELECT
        BUSRELACCOUNT,
        PARTYID,
        PARTYTYPE,
        BUSRELTYPEID,
		DATAAREAID,
        SBA_NUMBEROFEMPLOYEES,
        EMAIL,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.SMMBUSRELTABLE;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_VENDBANKACCOUNT]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_VENDBANKACCOUNT]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[VENDBANKACCOUNT]

    INSERT INTO [dbo].[VENDBANKACCOUNT] (
        VENDACCOUNT,
        ACCOUNTNUM,
        SWIFTNO,
        BANKIBAN,
		DATAAREAID,
		ACCOUNTID,
		EXPIRYDATE,
		BANKACCOUNTVALIDATIONMETHOD,
        [Lineage_Key]
    )
    SELECT
        VENDACCOUNT,
        ACCOUNTNUM,
        SWIFTNO,
        BANKIBAN,
		DATAAREAID,
		ACCOUNTID,
		EXPIRYDATE,
		BANKACCOUNTVALIDATIONMETHOD,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.VENDBANKACCOUNT

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_VENDINVOICETRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_VENDINVOICETRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[VENDINVOICETRANS]

    INSERT INTO [dbo].[VENDINVOICETRANS] (
        INVOICEID, 
        LINENUM,
        INVOICEDATE,
        ORIGPURCHID, 
        PURCHID,
        ITEMID, 
        EXTERNALITEMID,  
        QTY, 
        LINEAMOUNT,
        CREATEDDATETIME,
        [Lineage_Key]
    )
    SELECT
        INVOICEID, 
        LINENUM,
        INVOICEDATE,
        ORIGPURCHID, 
        PURCHID,
        ITEMID, 
        EXTERNALITEMID,  
        QTY, 
        LINEAMOUNT,
        CREATEDDATETIME,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.VENDINVOICETRANS
    WHERE DATAAREAID = '100'
    AND CREATEDDATETIME >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_VENDPACKINGSLIPTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_VENDPACKINGSLIPTRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[VENDPACKINGSLIPTRANS]

    INSERT INTO [dbo].[VENDPACKINGSLIPTRANS] (
        PACKINGSLIPID, 
        LINENUM, 
        PURCHID, 
        ORIGPURCHID, 
        ITEMID, 
        ORDERED, 
        QTY, 
        INVENTTRANSID,
        INVENTDATE, 
        DELIVERYDATE,
		DATAAREAID,
		RECID,
        [Lineage_Key]
    )
    SELECT
        PACKINGSLIPID, 
        LINENUM, 
        PURCHID, 
        ORIGPURCHID, 
        ITEMID, 
        ORDERED, 
        QTY, 
        INVENTTRANSID,
        INVENTDATE, 
        DELIVERYDATE,
		DATAAREAID,
		RECID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.VENDPACKINGSLIPTRANS
    WHERE CREATEDDATETIME >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_VENDPURCHORDERJOUR]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_VENDPURCHORDERJOUR]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[VENDPURCHORDERJOUR]

    INSERT INTO [dbo].[VENDPURCHORDERJOUR] (
        DATAAREAID,
        ORDERACCOUNT,
		PURCHASEORDERID,
        PURCHID,
        PURCHORDERDATE,
		RECID,
        [Lineage_Key]
    )
    SELECT
        v.DATAAREAID,
        v.ORDERACCOUNT,
		v.PURCHASEORDERID,
        v.PURCHID,
        v.PURCHORDERDATE,
		v.RECID,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.VENDPURCHORDERJOUR v
    JOIN [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.PURCHTABLE p ON p.PURCHID = v.PURCHID
    WHERE p.CREATEDDATETIME >= DATEFROMPARTS(YEAR(DATEADD(YEAR, -2, GETDATE())), 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_VENDTABLE]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_VENDTABLE]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

TRUNCATE TABLE [dbo].[VENDTABLE]

INSERT INTO [dbo].[VENDTABLE] (
		ACCOUNTNUM, 
		[NAME], 
		VENDGROUP, 
		VATNUM, 
		COUNTRYREGIONID, 
		ZIPCODE, 
		CITY, 
		STREET, 
		PAYMTERMID,
		PARTYID,
		PARTYTYPE,
		CASHDISC,
		DATAAREAID,
		[Lineage_Key]
)
select	ACCOUNTNUM, 
		[NAME], 
		VENDGROUP, 
		VATNUM, 
		COUNTRYREGIONID, 
		ZIPCODE, 
		CITY, 
		STREET, 
		PAYMTERMID,
		PARTYID,
		PARTYTYPE,
		CASHDISC,
		DATAAREAID,
		@LineageKey as [Lineage_Key]
FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.VENDTABLE;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_VENDTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_VENDTRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[VENDTRANS]

    INSERT INTO [dbo].[VENDTRANS] (
        ACCOUNTNUM,
		AMOUNTMST,
		DATAAREAID,
		DOCUMENTNUM,
        TRANSDATE,
        VOUCHER,
        TRANSTYPE,
        Valid_From,
        Valid_To,
        [Lineage_Key]
    )
    SELECT DISTINCT
        ACCOUNTNUM,
		AMOUNTMST,
		DATAAREAID,
		DOCUMENTNUM,
        TRANSDATE,
        VOUCHER,
        TRANSTYPE,
        GETDATE() AS Valid_From,
        CONVERT(datetime, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.VENDTRANS
    WHERE TRANSDATE >= DATEFROMPARTS(YEAR(GETDATE())-3, 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [dbo].[Load_WMSORDERTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Create or modify the procedure for loading data into the staging table
CREATE   PROCEDURE [dbo].[Load_WMSORDERTRANS]
@LineageKey int

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;
	    
    DECLARE @OutputMessage VARCHAR(250);
	DECLARE @RowCount INT;

    BEGIN TRANSACTION;

    BEGIN TRY

    TRUNCATE TABLE [dbo].[WMSORDERTRANS]

    INSERT INTO [dbo].[WMSORDERTRANS] (
        [EXPEDITIONSTATUS],
        [INVENTTRANSID],
        [INVENTTRANSREFID],
        [DATAAREAID],
        [RECID],
        Valid_From,
        Valid_To,
        [Lineage_Key]
    )
    SELECT
        [EXPEDITIONSTATUS],
        [INVENTTRANSID],
        [INVENTTRANSREFID],
        [DATAAREAID],
        [RECID],
        GETDATE() AS Valid_From,
        CONVERT(datetime, '9999-12-31') AS Valid_To,
        @LineageKey AS [Lineage_Key]
    FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.WMSORDERTRANS
    WHERE DLVDATE > DATEFROMPARTS(YEAR(GETDATE())-2, 1, 1)

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        -- Commit the transaction if both operations succeed
        COMMIT TRANSACTION;
		
        SET @OutputMessage = 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction if an error occurs
        ROLLBACK TRANSACTION;

		-- Collect the row count in a variable to write into the lineage table at success.
		SET @RowCount = @@ROWCOUNT;

        SET @OutputMessage = 'Transaction rolled back due to an error: ' + ERROR_MESSAGE();
    END CATCH;

	SELECT @RowCount, @OutputMessage;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [exe].[Get_LastLoadedDate]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [exe].[Get_LastLoadedDate]
@LoadType nvarchar(1),
@TableName nvarchar(100),
@Run nvarchar(250)
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

	-- If the procedure is executed with a wrong table name, throw an error.
	IF NOT EXISTS(SELECT 1 FROM sys.tables WHERE name = @TableName AND Type = N'U')
	BEGIN
        PRINT N'The table does not exist in the data warehouse.';
        THROW 51000, N'The table does not exist in the data warehouse.', 1;
        RETURN -1;
	END
	
    -- If the table exists, but was never loaded before, there won't be a record for it in the table
	-- A record is created for the @TableName, with the minimum possible date in the LoadDate column
	IF NOT EXISTS (SELECT 1 FROM [exe].[Table_List] WHERE Table_Name = @TableName)
		INSERT INTO [exe].[Table_List]
		SELECT @TableName, @LoadType, @Run, '1753-01-01', NULL, NULL


    -- Select the LoadDate for the @TableName
	SELECT 
		CASE WHEN [Last_Loaded_Date] IS NULL THEN '1753-01-01' ELSE [Last_Loaded_Date] END AS [LoadDate]
    FROM [exe].[Table_List]
    WHERE 
		Table_Name = @TableName;

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [exe].[Get_MaxCounter]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [exe].[Get_MaxCounter]

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

SELECT MAX(ID) FROM Table_List

    RETURN 0;
END;
GO
/****** Object:  StoredProcedure [exe].[Select_Stored_Procedure_Load]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [exe].[Select_Stored_Procedure_Load] 
	-- Add the parameters for the stored procedure here
	@TableName nvarchar(100),
	@LineageKey int,
	@LoadType nvarchar(1),
	@FullLoad bit
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--Load Full Tables
	IF @LoadType = 'F' 
	BEGIN
	EXEC('dbo.Load_' + @TableName + ' ' + @Lineagekey)
	END;

	--Load Incremental tables from temp tables
	IF @LoadType = 'I'
	BEGIN
		EXEC('Incr.Load_' + @TableName + ' ' + @LineageKey + ',' + @FullLoad)
	END;
	
END
GO
/****** Object:  StoredProcedure [exe].[Select_Table_For_Execute]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [exe].[Select_Table_For_Execute] 
	-- Add the parameters for the stored procedure here
	@CounterNumber Int,
	@LoadType nvarchar(1),
	@Run nvarchar(250)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
    -- Insert statements for procedure here
	SELECT Table_Name
	FROM [exe].[Table_List]
	WHERE @CounterNumber = ID
	AND Run LIKE '%' + @Run + '%'
	AND @LoadType = Load_Type
END
GO
/****** Object:  StoredProcedure [exe].[Update_Lineage_Error]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE   PROCEDURE [exe].[Update_Lineage_Error]
	-- Add the parameters for the stored procedure here
	@LineageKey Int,
	@OutputMessage nvarchar(max)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


	-- Update the lineage table for the most current table load with the finish date and 
	-- 'S' in the Status column, meaning that the load finished successfully
	UPDATE [exe].Lineage
        SET 
			Finish_Load = SYSDATETIME(),
            Load_Status = 'E',
			[Output_Message] = @OutputMessage
    WHERE [Lineage_Key] = @LineageKey;

END;
GO
/****** Object:  StoredProcedure [exe].[Update_Lineage_Start]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [exe].[Update_Lineage_Start]
@LoadType nvarchar(1),
@TableName nvarchar(100)

AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

/* 
A new row is inserted into the Lineage table, with the table name that will be loaded,
the starting date of the load, load type and load status.
Possible values for Type:
- F = Full load
- I = Incremental load

Possible values for Status:
- P = In progress
- E = Error
- S = Success
*/

DECLARE @LastLoadDate datetime2(7) = (SELECT MAX([Finish_Load]) FROM [exe].[Lineage] WHERE Table_Name = @TableName);
DECLARE @StartLoad datetime2(7) = GETDATE();
DECLARE @GUID uniqueidentifier;
SET @GUID = NEWID();

INSERT INTO [exe].[Lineage](
	 [Table_Name]
	,[Start_Load]
	,[Finish_Load]
	,[Load_Status]
	,[Type]
	,[Last_Loaded_Date]
	,[GUID]
	)
VALUES (
	 @TableName
	,@StartLoad
	,NULL
	,'P'
	,@LoadType
	,@LastLoadDate
	,@GUID
	);

-- Select the key of the previously inserted row
SELECT MAX([Lineage_Key]) AS LineageKey
FROM [exe].[Lineage]
WHERE Table_Name = @TableName  

RETURN 0;
END;
GO
/****** Object:  StoredProcedure [exe].[Update_Lineage_Success]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================

CREATE   PROCEDURE [exe].[Update_Lineage_Success]
	-- Add the parameters for the stored procedure here
	@LineageKey int,
	@TableName nvarchar(250),
	@OutputMessage nvarchar(max)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @LastLoadDate datetime2(7) = (SELECT MAX([Finish_Load]) FROM [exe].[Lineage] WHERE Table_Name = @TableName);

	DECLARE @RowCount BIGINT;
	DECLARE @SQL NVARCHAR(MAX);
	
	SET @SQL = '
		SELECT @RC = COUNT(1)
		FROM ' + QUOTENAME(@TableName) + '
		WHERE Lineage_Key = @LK';

	EXEC sp_executesql 
		@SQL, 
		N'@RC BIGINT OUTPUT, @LK INT', 
		@RC = @RowCount OUTPUT, 
		@LK = @LineageKey;

	-- Update the lineage table for the most current table load with the finish date and 
	-- 'S' in the Status column, meaning that the load finished successfully
	UPDATE [exe].Lineage
        SET 
			Finish_Load = GETDATE(),
			[Last_Loaded_Date]	= @LastLoadDate,
            Load_Status			= 'S',
			[Row_Count]			= @RowCount,
			Output_Message		= @OutputMessage
    WHERE [Lineage_Key]			= @LineageKey;

	SET @LastLoadDate =  (SELECT MAX([Finish_Load]) FROM [exe].[Lineage] WHERE Table_Name = @TableName)

	-- Update the table list for the most current table load with the finish date, 
	-- 'S' in the Status column, meaning that the load finished successfully 
	UPDATE [exe].[Table_List]
        SET 
			[Last_Loaded_Date]	= @LastLoadDate,
            [Load_Status]		= 'S',
			Output_Message		= @OutputMessage
    WHERE @TableName = Table_Name;

END;
GO
/****** Object:  StoredProcedure [Incr].[Load_LEDGERTRANS]    Script Date: 26-8-2025 21:36:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Incr].[Load_LEDGERTRANS]
    @LineageKey INT,
    @FullLoad BIT
AS
BEGIN
    SET NOCOUNT ON;
    SET XACT_ABORT ON;

    DECLARE @RowCount BIGINT = 0;
    DECLARE @OutputMessage NVARCHAR(250) = 'Insert successful';

    BEGIN TRY
        DECLARE @LastLoadDate DATETIME = (SELECT MAX(MODIFIEDDATETIME) FROM [dbo].[LEDGERTRANS]);
        DECLARE @MinimumLoadDate DATETIME = DATEFROMPARTS(YEAR(GETDATE()) - 1, 1, 1);

        IF @LastLoadDate IS NULL
            SET @FullLoad = 1;

        -- Step 1: Full load cleanup
        IF @FullLoad = 1
            TRUNCATE TABLE [dbo].[LEDGERTRANS];

        -- Step 2: Incremental load cleanup
        IF @FullLoad = 0
        BEGIN
            DELETE tgt
            FROM [dbo].[LEDGERTRANS] tgt
            JOIN [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.LEDGERTRANS src
                ON tgt.DATAAREAID = src.DATAAREAID COLLATE Czech_CI_AS
                AND tgt.RECID = src.RECID
            WHERE src.MODIFIEDDATETIME >= @LastLoadDate;
        END

        -- Insert matching records from remote source
        INSERT INTO [dbo].[LEDGERTRANS] (
            RECID, ACCOUNTNUM, DIMENSION, DIMENSION2_, DIMENSION3_, DOCUMENTNUM,
            TRANSDATE, TRANSTYPE, AMOUNTMST, POSTING, PERIODCODE, JOURNALNUM,
            DATAAREAID, TXT, VOUCHER, MODIFIEDBY, MODIFIEDDATETIME, Lineage_Key
        )
        SELECT
            src.RECID, src.ACCOUNTNUM, src.DIMENSION, src.DIMENSION2_, src.DIMENSION3_, src.DOCUMENTNUM,
            src.TRANSDATE, src.TRANSTYPE, src.AMOUNTMST, src.POSTING, src.PERIODCODE, src.JOURNALNUM,
            src.DATAAREAID, src.TXT, src.VOUCHER, src.MODIFIEDBY, src.MODIFIEDDATETIME, @LineageKey
        FROM [AXNL_SQL_R].[Ax_2009_Rys_Prod].dbo.LEDGERTRANS src
        WHERE (@FullLoad = 1 AND src.TRANSDATE >= @MinimumLoadDate)
           OR (@FullLoad = 0 AND src.MODIFIEDDATETIME >= @LastLoadDate);

        SET @RowCount = @@ROWCOUNT;
    END TRY
    BEGIN CATCH
        SET @OutputMessage = 'Error: ' + ERROR_MESSAGE();
    END CATCH

    SELECT @RowCount, @OutputMessage;
END;
GO
